global u8 restyled.Palette
global u8 restyled.Anim
global u8 restyled.Mira

//# address-hook(0x010a94) end(0x010ae8)
function void Character.BaseUpdate.Sonic()
{
	// hi rosie if you're looking through this code and wanna try messing around on your own, the function below is what you're looking for
	// the first parameter (the 0) in the function below is the player index, basically what controller the script will use to change the color. 0 is 1p, 1 is 2p.
	// the second parameter (the 0xffff00ff) is the color the controller has. its formatted as AABBGGRR, with each letter hopefully being self-explanatory.
	// each value can range from 0 to FF, or 0 to 255 pretty much
	// if you test this script without modifying it, your controller leds should light up a bright magenta.

	if (u8[0xffffe654] == 0)
		Input.setControllerLEDs(0, 0xFFFF48A0)
		
	base.Character.BaseUpdate.Sonic()
}




function void Init()
{
	if (restyled.Anim == 0x01 && u8[0xffffe654] == 0)
	{
		System.loadExternalRawData("SCD_walk", 0x12aee)
		System.loadExternalRawData("SCD_walk_super", 0x12c7a)
		System.loadExternalRawData("SCD_roll", 0x12b03)
		System.loadExternalRawData("SCD_idle", 0x12b20)
		System.loadExternalRawData("SCD_fan", 0x12bd1)
	}
	base.Init()
}



function string getCharacterPaletteKey(u8 character)
{
	if (character == CHARACTER_SONIC && u8[0xffffe654] == 0)
	{
		if (restyled.Palette == 0x00)
			return "00"
		if (restyled.Palette == 0x01)
			return "01"
		if (restyled.Palette == 0x02)
			return "02"
		if (restyled.Palette == 0x03)
		{
			if (restyled.Mira == 0x00)
				return "ff"
			else
				return "03"
		}
		if (restyled.Palette == 0x04)
			return "04"
		if (restyled.Palette == 0x05)
			return "05"
		if (restyled.Palette == 0x06)
			return "06"
		if (restyled.Palette == 0x07)
			return "07"
		if (restyled.Palette == 0x08)
			return "08"
		if (restyled.Palette == 0x09)
			return "09"
		if (restyled.Palette == 0x0a)
			return "0a"			
		if (restyled.Palette == 0x0b)
			return "0b"
		if (restyled.Palette == 0x0c)
			return "0c"
		if (restyled.Palette == 0x0d)
			return "0d"
		if (restyled.Palette == 0x0e)
			return "0e"
		if (restyled.Palette == 0x0f)
			return "0f"
		if (restyled.Palette == 0x10)
			return "10"
		if (restyled.Palette == 0x11)
			return "11"
		if (restyled.Palette == 0x12)
			return "12"
		if (restyled.Palette == 0x13)
			return "13"
		if (restyled.Palette == 0x14)
			return "14"
		if (restyled.Palette == 0x15)
			return "15"		
		if (restyled.Palette == 0x16)
			return "spooky"					
		else //Failsafe
			return "00"
	}

	return base.getCharacterPaletteKey(character)
}

function string getRestyledCharacterAnimationKey()
{
	if (restyled.Anim == 0x00)
		return "s1"
	if (restyled.Anim == 0x01)
		return "cd"
	if (restyled.Anim == 0x02)
		return "23"
	if (restyled.Anim == 0x03)
		return "misc"
	else //Failsafe
		return "s1"
}

function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	if (character != CHARACTER_SONIC || variant == 2 || u8[0xffffe654] != 0)
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)

	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0

	if (animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes
	{
		// Special handling for Drop Dash & Super Peel-Out
		if (char.state == char.state.SONIC_DROPDASH)
		{
			animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + ((level.framecounter >> 1) & 0x01)
		}
		else if (!super.active && animationSprite >= 0x21 && animationSprite <= 0x30)
		{
			if (sonic.fastrunanim.timer > 0)
			{
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)

				if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
				{
					angle = (animationSprite - 0x21) / 4 * 0xe0
					if (char.flags & char.flag.FACING_LEFT)
						angle = -angle
					animationSprite = 0x21 + (animationSprite - 0x21) % 4
				}
			}
		}
	}

	if (Game.getSetting(SETTING_SMOOTH_ROTATION))
	{
		// Character
		if (animationSprite >= 0x01 && animationSprite <= 0x20)
		{
			animationSprite = 0x01 + (animationSprite - 0x01) % 8
			rotationMode = 1
		}
		else if (animationSprite >= 0x21 && animationSprite <= 0x30)
		{
			animationSprite = 0x21 + (animationSprite - 0x21) % 4
			rotationMode = 1
		}
		else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
		{
			animationSprite = 0x78
			rotationMode = 2
		}
		else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
		{
			animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
			rotationMode = 1
		}
		else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
		{
			// Only for DDZ
			rotationMode = 1
		}

		if (rotationMode != 0)
		{
			s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
			flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

			angle = char.rotation
			if (rotationMode == 1)
			{
				if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
				{
					angle = 0
				}

				if (angle != char.rotation)
				{
					s8 diff = angle - oldRotation
					angle = oldRotation + clamp(diff, -3, 3)
				}
			}
		}

		if (isPlayer1)
			oldRotationPlayer1 = angle
		else
			oldRotationPlayer2 = angle
	}
	else
	{
		// Classic rotation
		if ((char.state == char.state.RUNNING) && (animationSpriteEx < 0x100))
		{
			u8 startingFrame = 0
			u8 frameCount 	 = 0
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				startingFrame = 0x01
				frameCount = 8
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				startingFrame = 0x21
				frameCount = 4
			}

			if ((startingFrame != 0) && (frameCount != 0))
			{
				angle = (animationSprite - startingFrame) / frameCount * 0xe0 * ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0) ? -1 : 1)
				animationSprite = startingFrame + (animationSprite - startingFrame) % frameCount
			}
		}

		// Nothing special for vine rotation sprites because the sprites for them already exist
	}
	
	key = Standalone.getModdedAnimationSpriteKey(character, animationSprite)
	if (animationSpriteEx >= 0x100)
	{
		// Special handling for Drop Dash & Super Peel-Out
		if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
		{
			if (restyled.Anim == 0)
				key = stringformat("sonic_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			else
				key = stringformat("sonic_peelout_%s_%d", getRestyledCharacterAnimationKey(), animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
		}
		else
			key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
	}
	
	timeattack.animSpriteEx = animationSpriteEx

	if (key == 0)
	{
		if (character == CHARACTER_SONIC)
		{
			if (restyled.Anim == 0)
				key = stringformat(super.active ? "character_supersonic_0x%02x" : "character_sonic_0x%02x", animationSprite)
			else
			{
				u64 regularkey = stringformat("character_sonic_%s_0x%02x", getRestyledCharacterAnimationKey(), animationSprite)
				u64 superkey = stringformat("character_supersonic_%s_0x%02x", getRestyledCharacterAnimationKey(), animationSprite)
				key = (super.active ? superkey : regularkey)
			}
		}

		if (!Renderer.hasCustomSprite(key))
		{
			u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
			u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
			u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

			key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	// Render character
	if (asSmallGhost)
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	else
	{
		if (char.state == char.state.GOT_HURT_PANIC && super.active)
		{
			angle = char.rotation
			
			if (char.flags & char.flag.IN_AIR)
			{
				char.hitbox_extends.x = char.hitbox.x.ROLLING
				char.hitbox_extends.y = char.hitbox.y.ROLLING
				char.flags |= char.flag.ROLLING
				char.state = char.state.ROLLING
			}
			
			py -= 8
		}
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			
			if (char.state == char.state.GOT_HURT_PANIC && super.active)
				py0 -= 8
			
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true
}

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
	if (char.state == char.state.COWERING && super.active && u8[0xffffe654] == 0)
		Restyled.UpdateSuperCrouchAnimation()
	else
		base.UpdateSonicAnimation()
}

function void Restyled.UpdateSuperCrouchAnimation()
{
	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}
		
	if (char.animation.timer >= 6)
	{
		char.animation.sprite = 0x9c
	}
	else
	{
		char.animation.sprite = 0x9b
		++char.animation.timer
	}

}

// load character palette for special stage since it doesnt load for some reason
//# address-hook(0x0015cc) end(0x001602)
function void fn0015cc()
{
	base.fn0015cc()
	if (isMainCharacter(CHARACTER_SONIC) && u8[0xffffe654] == 0) // also ensure it isnt exta slot
		loadCharacterPalette(CHARACTER_SONIC,    0x802180, 0)
}


//# address-hook(0x02df64) end(0x02e2be)
function void fn02df64()
{
	base.fn02df64()
	
	if (isMainCharacter(CHARACTER_SONIC) && u8[0xffffe654] == 0) // also ensure it isnt exta slot
		loadCharacterPalette(CHARACTER_SONIC,    0x802180, 0)
}